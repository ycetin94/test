apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    # If you encounter a redirect loop or are getting a 307 response code
    # then you need to force the nginx ingress to connect to the backend using HTTPS.
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    #nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  rules:
  - host: argocd.ycproject.click
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              # name: https
              number : 443
  tls:
  - hosts:
    - argocd.ycproject.click
    secretName: argocd-secret # do not change, this is provided by Argo CD

#nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
#nginx.ingress.kubernetes.io/force-ssl-redirect: "true"




# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: argocd.ycproject.click
#   namespace: argocd
#   annotations:
#     kubernetes.io/ingress.class: "nginx"
#     nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#     nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
# spec:
#   rules:
#   - http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: argocd-server
#             port:
#               name: http
#     host: argocd.ycproject.click
#   tls:
#   - hosts:
#     - argocd.ycproject.click
#     secretName: argocd-secret # do not change, this is provided by Argo CD
